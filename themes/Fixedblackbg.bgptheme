##############################################################################
# Derived from: TruncatedPwd_WindowTitle and Default themes
#
# Changes the prompt to use fixed black background color and fixed other
# colors. It also uses truncated PWD.
# There certainly is some broken functionality by this theme, like no
# refreshing of pwd when git_prompt_toggle is used and maybe more.
# Ubuntu version: added extra spaces after special symbols.
#
# Example usage:
# if [ -f ~/.bash-git-prompt/gitprompt.sh ]; then
# 	GIT_PROMPT_THEME=Fixedblackbg
# 	source ~/.bash-git-prompt/gitprompt.sh
# fi
#
##############################################################################

# Truncates PWD ##############################################################
# Credits to: http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x783.html
truncate_PWD() {
	pwd_length=20

	DIR=`pwd`

	echo $DIR | grep "^$HOME" > /dev/null

	if [ $? -eq 0 ]
	then
		CURRDIR=`echo $DIR | awk -F$HOME '{print $2}'`
		newPWD="~$CURRDIR"

		if [ $(echo -n $newPWD | wc -c | tr -d " ") -gt $pwd_length ]
		then
			newPWD="~/..$(echo -n $PWD | sed -e "s/.*\(.\{$pwd_length\}\)/\1/")"
		fi
	elif [ "$DIR" = "$HOME" ]
	then
		newPWD="~"
	elif [ $(echo -n $PWD | wc -c | tr -d " ") -gt $pwd_length ]
	then
		newPWD="..$(echo -n $PWD | sed -e "s/.*\(.\{$pwd_length\}\)/\1/")"
	else
		newPWD="$(echo -n $PWD)"
	fi

	echo -n "$newPWD"
}

override_git_prompt_colors() {
	GIT_PROMPT_THEME_NAME="Fixedblackbg"

	# Colors ###################################################################
	RED="\[\033[31m\]"
	GREEN="\[\033[32m\]"
	YELLOW="\[\033[33m\]"
	BLUE="\[\033[34m\]"
	MAGENTA="\[\033[35m\]"
	CYAN="\[\033[36m\]"
	LIGHT_GREY="\[\033[37m\]"
	FG_DEF="\[\033[39m\]"
	BG_BLACK="\[\033[40m\]"
	LIGHT_RED="\[\033[91m\]"
	LIGHT_BLUE="\[\033[94m\]"
	WHITE="\[\033[97m\]"
	BOLD="\[\033[1m\]"
	INVERSE="\[\033[4m\]"
	RESET_ALL="\[\033[0m\]"
	Time12a="\$(date +%H:%M)"
	#PathShort="\w";

  # local SSH=""
	# local SSH_IP=`echo $SSH_CLIENT | awk '{ print $1 }'`
	# if [ $SSH_IP ] ; then
		# SSH="SSH "
	# fi
	# local SSH2_IP=`echo $SSH2_CLIENT | awk '{ print $1 }'`
	# if [ $SSH2_IP ] ; then
		# SSH="SSH "
	# fi
		# SSH="SSH "
  # echo "SSH1:"
  # echo $SSH

  # # sets default style for hostname
  # local hostname=""
  # if [ -n "$SSH" ]; then
  #   hostname="\h: "
  # fi
  # echo "hostname1:"
  # echo $hostname


  # Possible to change which command is used to create git status information
  # There are three options:
  # 1) gitstatus.sh (uses git status --branch --porcelain - fast, requires git > 1.7.10)
  # 2) gitstatus_pre-1.7.10.sh (Uses a variety of git commands and pipes - slower, works with older git clients)
  # 3) gitstatus.py (Unsupported, lack features found in the bash versions)
  if [ -z "${GIT_PROMPT_STATUS_COMMAND+x}" ]; then GIT_PROMPT_STATUS_COMMAND="gitstatus.sh"; fi    # Point out the command to get the git status from

	GIT_PROMPT_START_USER="${BG_BLACK}_LAST_COMMAND_INDICATOR_${BG_BLACK} ${RESET_ALL}"
	GIT_PROMPT_COMMAND_OK="${GREEN}${BOLD}✔"                 # _last_command_indicator if the last command returned with an exit code of 0
	GIT_PROMPT_COMMAND_FAIL="${LIGHT_RED}${BOLD}✘-_LAST_COMMAND_STATE_" # _last_command_indicator if the last command returned with an exit code of other than 0
	#Overrides the prompt_callback function used by bash-git-prompt
	function prompt_callback {
    local SSH=""
    local SSH_IP=`echo $SSH_CLIENT | awk '{ print $1 }'`
    if [ $SSH_IP ] ; then
      SSH="SSH "
    fi
    local SSH2_IP=`echo $SSH2_CLIENT | awk '{ print $1 }'`
    if [ $SSH2_IP ] ; then
      SSH="SSH "
    fi

    # sets default style for hostname
    local hostname=""
    if [ -n "$SSH" ]; then
      hostname="\h: "
    fi

		local trunk_pwd="$(truncate_PWD)"
		gp_set_window_title "$hostname$trunk_pwd"
		echo -n "${BG_BLACK}${LIGHT_GREY}${hostname}${LIGHT_BLUE}${trunk_pwd}${FG_DEF}"
	}

	local gp_end=" \n${BG_BLACK}${YELLOW}${Time12a}${RESET_ALL}"
	GIT_PROMPT_END_USER="${gp_end} ${BOLD}\$${RESET_ALL} "
	GIT_PROMPT_END_ROOT="${gp_end} ${BOLD}#${RESET_ALL} "
	#GIT_PROMPT_END_ROOT="${gp_end} # "

	## These are the color definitions used by gitprompt.sh
	GIT_PROMPT_PREFIX="${BG_BLACK}${LIGHT_GREY}["            # start of the git info string
	GIT_PROMPT_SUFFIX="${BG_BLACK}${LIGHT_GREY}]${RESET_ALL}" # the end of the git info string
	GIT_PROMPT_SEPARATOR="${BG_BLACK}${LIGHT_GREY}|"         # separates each item
	GIT_PROMPT_BRANCH="${BG_BLACK}${GREEN}"                  # the git branch that is active in the current directory
	if [ -z "${GIT_PROMPT_MASTER_BRANCH+x}" ]; then GIT_PROMPT_MASTER_BRANCH="${GIT_PROMPT_BRANCH}"; fi  # used if the git branch that is active in the current directory is $GIT_PROMPT_MASTER_BRANCHES
  GIT_PROMPT_STAGED="${BG_BLACK}${CYAN} ●"								 # the number of staged files/directories
	GIT_PROMPT_CONFLICTS="${BG_BLACK}${BOLD}${LIGHT_RED} ✖ "        # the number of files in conflict
	GIT_PROMPT_CHANGED="${BG_BLACK}${BOLD}${LIGHT_BLUE} ✚ "         # the number of changed files

	# GIT_PROMPT_REMOTE=" "                 # the remote branch name (if any) and the symbols for ahead and behind
	GIT_PROMPT_UNTRACKED="${BG_BLACK}${LIGHT_GREY} …"        # the number of untracked files/dirs
	GIT_PROMPT_STASHED="${BG_BLACK}${BOLD}${MAGENTA} ⚑ "      # the number of stashed files/dir
	GIT_PROMPT_CLEAN="${BG_BLACK}${BOLD}${GREEN}✔"           # a colored flag indicating a "clean" repo

	## template for displaying the current virtual environment
	## use the placeholder _VIRTUALENV_ will be replaced with
	## the name of the current virtual environment (currently CONDA and VIRTUAL_ENV)
	GIT_PROMPT_VIRTUALENV="(${BG_BLACK}${GREEN}_VIRTUALENV_${ResetColor}) "

	# template for displaying the current remote tracking branch
	# use the placeholder _UPSTREAM_ will be replaced with
	# the name of the current remote tracking branch
	GIT_PROMPT_UPSTREAM=" {${BG_BLACK}${LIGHT_BLUE}_UPSTREAM_${ResetColor}}"

	## _LAST_COMMAND_INDICATOR_ will be replaced by the appropriate GIT_PROMPT_COMMAND_OK OR GIT_PROMPT_COMMAND_FAIL
	# GIT_PROMPT_START_USER="_LAST_COMMAND_INDICATOR_ ${Yellow}${PathShort}${ResetColor}"
	# GIT_PROMPT_START_ROOT="_LAST_COMMAND_INDICATOR_ ${GIT_PROMPT_START_USER}"
	# GIT_PROMPT_END_USER=" \n${White}${Time12a}${ResetColor} $ "
	# GIT_PROMPT_END_ROOT=" \n${White}${Time12a}${ResetColor} # "

	## Please do not add colors to these symbols
	GIT_PROMPT_SYMBOLS_AHEAD="${BG_BLACK}${BOLD}${YELLOW}↑" # The symbol for "n versions ahead of origin"
	GIT_PROMPT_SYMBOLS_BEHIND="${BG_BLACK}${BOLD}${LIGHT_RED}↓"   # The symbol for "n versions behind of origin"
	GIT_PROMPT_SYMBOLS_PREHASH="${BG_BLACK}${LIGHT_GREY}:"   # Written before hash of commit, if no name could be found
	GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING="${BG_BLACK}${BOLD}${LIGHT_RED}Local" # This symbol is written after the branch, if the branch is not tracked

  # branch name(s) that will use $GIT_PROMPT_MASTER_BRANCH color
  # To specify multiple branches, use
  #   shopt -s extglob
  #   GIT_PROMPT_MASTER_BRANCHES='@(master|production)'
  if [ -z ${GIT_PROMPT_MASTER_BRANCHES+x} ]; then GIT_PROMPT_MASTER_BRANCHES="master"; fi
}

reload_git_prompt_colors "Fixedblackbg"

